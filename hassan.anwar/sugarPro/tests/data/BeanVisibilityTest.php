<?php

require_once 'data/BeanVisibility.php';
require_once 'tests/tests/PHPUnit_Framework_SugarBeanRelated_TestCase.php';

/**
 * Test class for BeanVisibility.
 * Generated by PHPUnit on 2012-04-04 at 13:36:01.
 */
class BeanVisibilityTest extends PHPUnit_Framework_SugarBeanRelated_TestCase
{
    /**
     * @var BeanVisibility
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new BeanVisibility($this->getBeanMock(), array());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    private function getStrategy($query = '')
    {
        $mock = new MockSugarStrategy($this->getBeanMock());
        $mock->query = $query;
        return $mock;
    }

    /**
     * @covers BeanVisibility::addStrategy
     */
    public function testAddStrategy()
    {
        $this->assertNull($this->object->addStrategy($this->getStrategy(), array('pirates' => 'yay')));
    }

    /**
     * @covers BeanVisibility::addVisibilityFrom
     */
    public function testAddVisibilityFrom()
    {
        $this->object->addStrategy("MockSugarStrategy", array("query" => "testingFrom"));
        $query = 'from';
        $this->assertEquals($this->object->addVisibilityFrom($query), 'from testingFrom');
    }

    /**
     * @covers BeanVisibility::addVisibilityWhere
     */
    public function testAddVisibilityWhere()
    {
        $this->object->addStrategy("MockSugarStrategy", array("query" => "testingWhere"));
        $query = 'where';
        $this->assertEquals($this->object->addVisibilityWhere($query), 'where testingWhere');
    }
}

class MockSugarStrategy extends SugarVisibility
{
    public $query;

    public function __construct($bean, $data = array())
    {
        parent::__construct($bean, $data);
        if(!empty($data['query']))
            $this->query = $data['query'];
    }

    public function addVisibilityFrom(&$query)
    {
    	$query .= " {$this->query}";
    	return $query;
    }
    public function addVisibilityWhere(&$query)
    {
    	$query .= " {$this->query}";
    	return $query;
    }

}
