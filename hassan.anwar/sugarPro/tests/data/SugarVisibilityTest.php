<?php

require_once 'data/SugarBean.php';
require_once 'data/SugarVisibility.php';
require_once 'tests/tests/PHPUnit_Framework_SugarBeanRelated_TestCase.php';

/**
 * Test class for SugarVisibility.
 * Generated by PHPUnit on 2012-04-04 at 20:57:38.
 */
class SugarVisibilityTest extends PHPUnit_Framework_SugarBeanRelated_TestCase
{
    /**
     * @var SugarVisibility
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = $this->getMockForAbstractClass('SugarVisibility', array($this->getBeanMock()));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers SugarVisibility::addVisibilityFrom
     */
    public function testAddVisibilityFrom()
    {
        $query = 'from';
        $this->assertEquals($query, $this->object->addVisibilityFrom($query));
    }

    /**
     * @covers SugarVisibility::addVisibilityWhere
     */
    public function testAddVisibilityWhere()
    {
        $query = 'from';
        $this->assertEquals($query, $this->object->addVisibilityFrom($query));
    }

    /**
     * @covers SugarVisibility::getOption
     */
    public function testGetOption()
    {
        $this->assertEquals('default', $this->object->getOption('nonexisting_option', 'default'), 'returns default value');
        $this->assertNull($this->object->getOption('nonexisting_option'));
        $this->object->setOptions(array('test' => 'yay'));
        $this->assertEquals('yay', $this->object->getOption('test'), 'returns option\'s value');

    }

    /**
     * @covers SugarVisibility::setOptions
     */
    public function testSetOptions()
    {
        $options = array(
            'test1' => 'yay1',
            'test2' => 'yay2',
            'pirates' => 'attack!'
        );

        $this->assertEquals($this->object, $this->object->setOptions($options), 'returns self');

        foreach($options as $key => $value)
        {
            $this->assertEquals($value, $this->object->getOption($key));
        }
    }
}
?>
